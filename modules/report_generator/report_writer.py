from modules.report_generator.stats_generator import StatsGenerator

class ReportWriter: 
    stats_generator: StatsGenerator
    date: str
    report_name: str
    
    def __init__(self, stats_generator, date, simulation_number):
        self.date = date
        self.stats_generator = stats_generator
        self.report_name = f"APLSTATS-[REPORT]- SIMULATION #{simulation_number} -{self.date}.log"
    
    def write_report(self):
        with open('./reports/' + self.report_name, 'a') as file:
            file.write("******************************************" + '\n')
            file.write("*                 STATS                  *" + '\n')
            file.write("******************************************" + '\n')
            for i in range(2):
                file.write('\n')
            file.write("EVENTS BY MISSION AND DEVICE" + '\n')
            for mission in self.stats_generator.generate_stats():
                file.write(f"------------------{mission[0]}------------------" + '\n')
                file.write(f"Total Events: {mission[3]}" + '\n')
                file.write('Status:' + '\n')
                for status in mission[1]:
                    file.write(f" {status} = {str(mission[1][status])}" '\n')
                file.write('Devices:' + '\n')
                for devices in mission[2]:
                    file.write(f" {devices} = {str(mission[2][devices])}" '\n')
            for i in range(3):
                file.write('\n')
            file.write("DEVICES FAILING THE MOST BY MISSION" + '\n')
            for mission in self.stats_generator.get_max_devices_unknown_status():
                file.write(f"------------------{mission[0]}------------------" + '\n')
                file.write(f"{mission[1][0]} = {mission[1][1]}" + '\n')
            for i in range(3):
                file.write('\n')
            file.write(f"KILLED DEVICES: {self.stats_generator.get_total_killed_devices()}" + '\n')
            for i in range(3):
                file.write('\n')
            file.write("PERCENTAGE OF DATA GENERATED BY:" + '\n')
            for item, item_value in self.stats_generator.get_data_stats().items():
                file.write(f"------------------{item}------------------" + '\n')
                for key, percentage in item_value.items():
                    file.write(f"{key} = {int(round(percentage, 2) * 100)}%" + '\n')
